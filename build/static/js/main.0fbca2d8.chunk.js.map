{"version":3,"sources":["services/notes.js","components/Note.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["request","axios","get","nonExisting","id","content","date","important","then","response","data","concat","newObject","post","put","Note","note","toggleImportance","label","className","onClick","Notification","message","Footer","style","color","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","err","setTimeout","key","onSubmit","e","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"+OA+Be,EAtBA,WACb,IAAMA,EAAUC,IAAMC,IAHR,UAKRC,EAAc,CAClBC,GAAI,IACJC,QAAS,mCACTC,KAAM,2BACNC,WAAW,GAEb,OAAOP,EAAQQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAOR,OAaxC,EAVA,SAAAS,GAEb,OADgBX,IAAMY,KAfR,SAesBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACN,EAAIQ,GAElB,OADgBX,IAAMa,IAAN,UApBF,SAoBE,YAAwBV,GAAMQ,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SChB5BK,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKT,UAAY,wBAA0B,oBACzD,OACE,wBAAIY,UAAU,QACXH,EAAKX,QACN,4BAAQc,UAAU,oBAAoBC,QAASH,GAAmBC,KCMzDG,EAXM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EAAyB,KAG3B,yBAAKH,UAAU,SACZG,ICSQC,EAdA,WAMb,OACE,yBAAKC,MANa,CAClBC,MAAO,UACPC,SAAU,KAKR,6BACA,uG,8NCLN,IAyGeC,EAzGH,SAACC,GAAW,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAESF,mBAAS,IAFlB,mBAEdG,EAFc,KAELC,EAFK,OAGSJ,oBAAS,GAHlB,mBAGdK,EAHc,KAGLC,EAHK,OAImBN,mBAAS,MAJ5B,mBAIdO,EAJc,KAIAC,EAJA,KAarBC,qBAPa,WACXC,IAEG/B,MAAK,SAAAgC,GACJT,EAASS,QAGC,IAEhB,IAAMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAA1B,GAAI,OAAIA,EAAKT,aA+BxBoC,EAAqB,SAAAvC,GAEzB,IAAMY,EAAOc,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAEzC,KAAOA,KAGhC0C,E,yVAAW,IAAQ9B,EAAR,CAAcT,WAAYS,EAAKT,YAKhDgC,EACUnC,EAAI0C,GACXtC,MAAK,SAAAuC,GAGJhB,EAASD,EAAMkB,KAAI,SAAAhC,GAAI,OAAIA,EAAKZ,KAAOA,EAAKY,EAAO+B,SAEpDE,OAAM,SAAAC,GACLb,EAAgB,aAAD,OAAcrB,EAAKX,QAAnB,sCACf8C,YAAW,WACTd,EAAgB,QACf,KAEHN,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAEzC,KAAOA,UAK1C,OACE,6BACE,qCAEA,kBAAC,EAAD,CAAckB,QAASc,IAEvB,6BACE,4BAAQjB,UAAU,kBAAkBC,QAAS,kBAAMe,GAAYD,KAA/D,QACQA,EAAU,YAAc,QAIlC,wBAAIf,UAAU,kBArECsB,EAAYO,KAAI,SAAAhC,GAAI,OACrC,kBAAC,EAAD,CACEoC,IAAKpC,EAAKZ,GACVY,KAAMA,EACNC,iBAAkB,kBAAM0B,EAAmB3B,EAAKZ,WAqEhD,0BAAMiD,SA5DM,SAACC,GACfA,EAAEC,iBACF,IAAMC,EAAa,CACjBnD,QAAS2B,EACT1B,MAAM,IAAImD,MAAOC,cACjBnD,UAAWoD,KAAKC,SAAW,IAG7BrB,EACUiB,GACPhD,MAAK,SAAAuC,GACJhB,EAAS,GAAD,mBAAKD,GAAL,CAAYiB,KACpBd,EAAW,SAiDX,2BACE4B,MAAO7B,EACP8B,SApEiB,SAACR,GAExBrB,EAAWqB,EAAES,OAAOF,UAoEhB,4BAAQ1C,UAAU,kBAAkB6C,KAAK,UAAzC,QAGF,kBAAC,EAAD,Q,MCrGNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.0fbca2d8.chunk.js","sourcesContent":["import axios from 'axios'\n/*\n  Because in our situation both the frontend and the backend\n  are at the same address, we can declare baseUrl as a relative URL.\n  This means we can leave out the part declaring the server.\n  const baseUrl = 'https://infinite-fortress-16348.herokuapp.com/notes'\n*/\nconst baseUrl = '/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  // return request.then(response => response.data)\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'mark as not important' : 'mark as important'\n  return (\n    <li className='note'>\n      {note.content}\n      <button className='btn btn-secondary' onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) return null\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\n\nexport default Notification","import React from 'react'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: '#767676',\n    fontSize: 11\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\n    </div> \n  )\n}\n\nexport default Footer","import React, { useState, useEffect } from 'react'\nimport noteService from './services/notes'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const hook = () => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }\n  useEffect(hook, [])\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important) // note.important === true\n\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance={() => toggleImportanceOf(note.id)}\n    />\n  )\n\n  const handleNoteChange = (e) => {\n    // console.log(e.target.value)\n    setNewNote(e.target.value)\n  }\n\n  const addNote = (e) => {\n    e.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes([...notes, returnedNote])\n        setNewNote('')\n      })\n  }\n\n  const toggleImportanceOf = id => {\n    // array find method to find the note we want to modify, and assing it to the `note` variable\n    const note = notes.find(n => n.id === id)\n    // then we create a new object that is the exact copy of the note we saved,\n    // apart from the important property, which we toggle to be the opposite of its previous value\n    const changedNote = { ...note, important: !note.important } // shallow copy\n\n    // The callback function sets the component's notes state to a new array that\n    // contains all the items from the previous notes array, except for the old note\n    // which is replaced by the updated version of it returned by the server:\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        // if note.id !== id is true, we simply copy the item from the old array into the new array\n        // if the condition is false, then the note object returned by the server is added to the array instead.\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(err => {\n        setErrorMessage(`The note '${note.content}' was already deleted from server`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        //return an array with only the items from the list for which n.id !== id return true for\n        setNotes(notes.filter(n => n.id !== id))\n      })\n\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n\n      <Notification message={errorMessage} />\n\n      <div>\n        <button className='btn btn-primary' onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n\n      <ul className='note-container'>\n        {rows()}\n      </ul>\n\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button className='btn btn-primary' type='submit'>Add</button>\n      </form>\n\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}